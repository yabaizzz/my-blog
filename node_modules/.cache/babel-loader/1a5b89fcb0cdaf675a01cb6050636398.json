{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, reactive, nextTick, onMounted, defineComponent } from \"vue\";\nimport { deepClone } from \"../utils/deep-clone.mjs\";\nimport { pick, extend, makeArrayProp, makeNumericProp, createNamespace } from \"../utils/index.mjs\";\nimport { pickerSharedProps } from \"../picker/Picker.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst [name, bem] = createNamespace(\"area\");\nconst EMPTY_CODE = \"000000\";\nconst INHERIT_SLOTS = [\"title\", \"cancel\", \"confirm\", \"toolbar\", \"columns-top\", \"columns-bottom\"];\nconst INHERIT_PROPS = [\"title\", \"loading\", \"readonly\", \"itemHeight\", \"swipeDuration\", \"visibleItemCount\", \"cancelButtonText\", \"confirmButtonText\"];\n\nconst isOverseaCode = code => code[0] === \"9\";\n\nconst areaProps = extend({}, pickerSharedProps, {\n  value: String,\n  columnsNum: makeNumericProp(3),\n  columnsPlaceholder: makeArrayProp(),\n  areaList: {\n    type: Object,\n    default: () => ({})\n  },\n  isOverseaCode: {\n    type: Function,\n    default: isOverseaCode\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: areaProps,\n  emits: [\"change\", \"confirm\", \"cancel\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const pickerRef = ref();\n    const state = reactive({\n      code: props.value,\n      columns: [{\n        values: []\n      }, {\n        values: []\n      }, {\n        values: []\n      }]\n    });\n    const areaList = computed(() => {\n      const {\n        areaList: areaList2\n      } = props;\n      return {\n        province: areaList2.province_list || {},\n        city: areaList2.city_list || {},\n        county: areaList2.county_list || {}\n      };\n    });\n    const placeholderMap = computed(() => {\n      const {\n        columnsPlaceholder\n      } = props;\n      return {\n        province: columnsPlaceholder[0] || \"\",\n        city: columnsPlaceholder[1] || \"\",\n        county: columnsPlaceholder[2] || \"\"\n      };\n    });\n\n    const getDefaultCode = () => {\n      if (props.columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const {\n        county,\n        city\n      } = areaList.value;\n      const countyCodes = Object.keys(county);\n\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(city);\n\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return \"\";\n    };\n\n    const getColumnValues = (type, code) => {\n      let column = [];\n\n      if (type !== \"province\" && !code) {\n        return column;\n      }\n\n      const list = areaList.value[type];\n      column = Object.keys(list).map(listCode => ({\n        code: listCode,\n        name: list[listCode]\n      }));\n\n      if (code) {\n        if (type === \"city\" && props.isOverseaCode(code)) {\n          code = \"9\";\n        }\n\n        column = column.filter(item => item.code.indexOf(code) === 0);\n      }\n\n      if (placeholderMap.value[type] && column.length) {\n        let codeFill = \"\";\n\n        if (type === \"city\") {\n          codeFill = EMPTY_CODE.slice(2, 4);\n        } else if (type === \"county\") {\n          codeFill = EMPTY_CODE.slice(4, 6);\n        }\n\n        column.unshift({\n          code: code + codeFill,\n          name: placeholderMap.value[type]\n        });\n      }\n\n      return column;\n    };\n\n    const getIndex = (type, code) => {\n      let compareNum = code.length;\n\n      if (type === \"province\") {\n        compareNum = props.isOverseaCode(code) ? 1 : 2;\n      }\n\n      if (type === \"city\") {\n        compareNum = 4;\n      }\n\n      code = code.slice(0, compareNum);\n      const list = getColumnValues(type, compareNum > 2 ? code.slice(0, compareNum - 2) : \"\");\n\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    };\n\n    const setValues = () => {\n      const picker = pickerRef.value;\n\n      if (!picker) {\n        return;\n      }\n\n      let code = state.code || getDefaultCode();\n      const province = getColumnValues(\"province\");\n      const city = getColumnValues(\"city\", code.slice(0, 2));\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n\n      if (city.length && code.slice(2, 4) === \"00\" && !props.isOverseaCode(code)) {\n        [{\n          code\n        }] = city;\n      }\n\n      picker.setColumnValues(2, getColumnValues(\"county\", code.slice(0, 4)));\n      picker.setIndexes([getIndex(\"province\", code), getIndex(\"city\", code), getIndex(\"county\", code)]);\n    };\n\n    const parseValues = values => values.map((value, index) => {\n      if (value) {\n        value = deepClone(value);\n\n        if (!value.code || value.name === props.columnsPlaceholder[index]) {\n          value.code = \"\";\n          value.name = \"\";\n        }\n      }\n\n      return value;\n    });\n\n    const getValues = () => {\n      if (pickerRef.value) {\n        const values = pickerRef.value.getValues().filter(Boolean);\n        return parseValues(values);\n      }\n\n      return [];\n    };\n\n    const getArea = () => {\n      const values = getValues();\n      const area = {\n        code: \"\",\n        country: \"\",\n        province: \"\",\n        city: \"\",\n        county: \"\"\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map(item => item.name);\n      const validValues = values.filter(value => value.code);\n      area.code = validValues.length ? validValues[validValues.length - 1].code : \"\";\n\n      if (props.isOverseaCode(area.code)) {\n        area.country = names[1] || \"\";\n        area.province = names[2] || \"\";\n      } else {\n        area.province = names[0] || \"\";\n        area.city = names[1] || \"\";\n        area.county = names[2] || \"\";\n      }\n\n      return area;\n    };\n\n    const reset = (newCode = \"\") => {\n      state.code = newCode;\n      setValues();\n    };\n\n    const onChange = (values, index) => {\n      state.code = values[index].code;\n      setValues();\n\n      if (pickerRef.value) {\n        const parsedValues = parseValues(pickerRef.value.getValues());\n        emit(\"change\", parsedValues, index);\n      }\n    };\n\n    const onConfirm = (values, index) => {\n      setValues();\n      emit(\"confirm\", parseValues(values), index);\n    };\n\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n\n    onMounted(setValues);\n    watch(() => props.value, value => {\n      state.code = value;\n      setValues();\n    });\n    watch(() => props.areaList, setValues, {\n      deep: true\n    });\n    watch(() => props.columnsNum, () => {\n      nextTick(setValues);\n    });\n    useExpose({\n      reset,\n      getArea,\n      getValues\n    });\n    return () => {\n      const columns = state.columns.slice(0, +props.columnsNum);\n      return _createVNode(Picker, _mergeProps({\n        \"ref\": pickerRef,\n        \"class\": bem(),\n        \"columns\": columns,\n        \"columnsFieldNames\": {\n          text: \"name\"\n        },\n        \"onChange\": onChange,\n        \"onCancel\": onCancel,\n        \"onConfirm\": onConfirm\n      }, pick(props, INHERIT_PROPS)), pick(slots, INHERIT_SLOTS));\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"names":["createVNode","_createVNode","mergeProps","_mergeProps","ref","watch","computed","reactive","nextTick","onMounted","defineComponent","deepClone","pick","extend","makeArrayProp","makeNumericProp","createNamespace","pickerSharedProps","useExpose","Picker","name","bem","EMPTY_CODE","INHERIT_SLOTS","INHERIT_PROPS","isOverseaCode","code","areaProps","value","String","columnsNum","columnsPlaceholder","areaList","type","Object","default","Function","stdin_default","props","emits","setup","emit","slots","pickerRef","state","columns","values","areaList2","province","province_list","city","city_list","county","county_list","placeholderMap","getDefaultCode","length","countyCodes","keys","cityCodes","getColumnValues","column","list","map","listCode","filter","item","indexOf","codeFill","slice","unshift","getIndex","compareNum","i","setValues","picker","setColumnValues","setIndexes","parseValues","index","getValues","Boolean","getArea","area","country","names","validValues","reset","newCode","onChange","parsedValues","onConfirm","onCancel","args","deep","text"],"sources":["D:/项目/my-blog/node_modules/vant/es/area/Area.mjs"],"sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, reactive, nextTick, onMounted, defineComponent } from \"vue\";\nimport { deepClone } from \"../utils/deep-clone.mjs\";\nimport { pick, extend, makeArrayProp, makeNumericProp, createNamespace } from \"../utils/index.mjs\";\nimport { pickerSharedProps } from \"../picker/Picker.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst [name, bem] = createNamespace(\"area\");\nconst EMPTY_CODE = \"000000\";\nconst INHERIT_SLOTS = [\"title\", \"cancel\", \"confirm\", \"toolbar\", \"columns-top\", \"columns-bottom\"];\nconst INHERIT_PROPS = [\"title\", \"loading\", \"readonly\", \"itemHeight\", \"swipeDuration\", \"visibleItemCount\", \"cancelButtonText\", \"confirmButtonText\"];\nconst isOverseaCode = (code) => code[0] === \"9\";\nconst areaProps = extend({}, pickerSharedProps, {\n  value: String,\n  columnsNum: makeNumericProp(3),\n  columnsPlaceholder: makeArrayProp(),\n  areaList: {\n    type: Object,\n    default: () => ({})\n  },\n  isOverseaCode: {\n    type: Function,\n    default: isOverseaCode\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: areaProps,\n  emits: [\"change\", \"confirm\", \"cancel\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const pickerRef = ref();\n    const state = reactive({\n      code: props.value,\n      columns: [{\n        values: []\n      }, {\n        values: []\n      }, {\n        values: []\n      }]\n    });\n    const areaList = computed(() => {\n      const {\n        areaList: areaList2\n      } = props;\n      return {\n        province: areaList2.province_list || {},\n        city: areaList2.city_list || {},\n        county: areaList2.county_list || {}\n      };\n    });\n    const placeholderMap = computed(() => {\n      const {\n        columnsPlaceholder\n      } = props;\n      return {\n        province: columnsPlaceholder[0] || \"\",\n        city: columnsPlaceholder[1] || \"\",\n        county: columnsPlaceholder[2] || \"\"\n      };\n    });\n    const getDefaultCode = () => {\n      if (props.columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n      const {\n        county,\n        city\n      } = areaList.value;\n      const countyCodes = Object.keys(county);\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n      const cityCodes = Object.keys(city);\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n      return \"\";\n    };\n    const getColumnValues = (type, code) => {\n      let column = [];\n      if (type !== \"province\" && !code) {\n        return column;\n      }\n      const list = areaList.value[type];\n      column = Object.keys(list).map((listCode) => ({\n        code: listCode,\n        name: list[listCode]\n      }));\n      if (code) {\n        if (type === \"city\" && props.isOverseaCode(code)) {\n          code = \"9\";\n        }\n        column = column.filter((item) => item.code.indexOf(code) === 0);\n      }\n      if (placeholderMap.value[type] && column.length) {\n        let codeFill = \"\";\n        if (type === \"city\") {\n          codeFill = EMPTY_CODE.slice(2, 4);\n        } else if (type === \"county\") {\n          codeFill = EMPTY_CODE.slice(4, 6);\n        }\n        column.unshift({\n          code: code + codeFill,\n          name: placeholderMap.value[type]\n        });\n      }\n      return column;\n    };\n    const getIndex = (type, code) => {\n      let compareNum = code.length;\n      if (type === \"province\") {\n        compareNum = props.isOverseaCode(code) ? 1 : 2;\n      }\n      if (type === \"city\") {\n        compareNum = 4;\n      }\n      code = code.slice(0, compareNum);\n      const list = getColumnValues(type, compareNum > 2 ? code.slice(0, compareNum - 2) : \"\");\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n      return 0;\n    };\n    const setValues = () => {\n      const picker = pickerRef.value;\n      if (!picker) {\n        return;\n      }\n      let code = state.code || getDefaultCode();\n      const province = getColumnValues(\"province\");\n      const city = getColumnValues(\"city\", code.slice(0, 2));\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n      if (city.length && code.slice(2, 4) === \"00\" && !props.isOverseaCode(code)) {\n        [{\n          code\n        }] = city;\n      }\n      picker.setColumnValues(2, getColumnValues(\"county\", code.slice(0, 4)));\n      picker.setIndexes([getIndex(\"province\", code), getIndex(\"city\", code), getIndex(\"county\", code)]);\n    };\n    const parseValues = (values) => values.map((value, index) => {\n      if (value) {\n        value = deepClone(value);\n        if (!value.code || value.name === props.columnsPlaceholder[index]) {\n          value.code = \"\";\n          value.name = \"\";\n        }\n      }\n      return value;\n    });\n    const getValues = () => {\n      if (pickerRef.value) {\n        const values = pickerRef.value.getValues().filter(Boolean);\n        return parseValues(values);\n      }\n      return [];\n    };\n    const getArea = () => {\n      const values = getValues();\n      const area = {\n        code: \"\",\n        country: \"\",\n        province: \"\",\n        city: \"\",\n        county: \"\"\n      };\n      if (!values.length) {\n        return area;\n      }\n      const names = values.map((item) => item.name);\n      const validValues = values.filter((value) => value.code);\n      area.code = validValues.length ? validValues[validValues.length - 1].code : \"\";\n      if (props.isOverseaCode(area.code)) {\n        area.country = names[1] || \"\";\n        area.province = names[2] || \"\";\n      } else {\n        area.province = names[0] || \"\";\n        area.city = names[1] || \"\";\n        area.county = names[2] || \"\";\n      }\n      return area;\n    };\n    const reset = (newCode = \"\") => {\n      state.code = newCode;\n      setValues();\n    };\n    const onChange = (values, index) => {\n      state.code = values[index].code;\n      setValues();\n      if (pickerRef.value) {\n        const parsedValues = parseValues(pickerRef.value.getValues());\n        emit(\"change\", parsedValues, index);\n      }\n    };\n    const onConfirm = (values, index) => {\n      setValues();\n      emit(\"confirm\", parseValues(values), index);\n    };\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    onMounted(setValues);\n    watch(() => props.value, (value) => {\n      state.code = value;\n      setValues();\n    });\n    watch(() => props.areaList, setValues, {\n      deep: true\n    });\n    watch(() => props.columnsNum, () => {\n      nextTick(setValues);\n    });\n    useExpose({\n      reset,\n      getArea,\n      getValues\n    });\n    return () => {\n      const columns = state.columns.slice(0, +props.columnsNum);\n      return _createVNode(Picker, _mergeProps({\n        \"ref\": pickerRef,\n        \"class\": bem(),\n        \"columns\": columns,\n        \"columnsFieldNames\": {\n          text: \"name\"\n        },\n        \"onChange\": onChange,\n        \"onCancel\": onCancel,\n        \"onConfirm\": onConfirm\n      }, pick(props, INHERIT_PROPS)), pick(slots, INHERIT_SLOTS));\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}