{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//公共的封装方法\nimport { Dialog, Toast, ImagePreview } from \"vant\";\nimport ImageCompressor from 'compressorjs';\nimport util from \"@/util/utils\"; // 在需要使用的页面引入即可\n// 例：import {callPhone} from \"@/util/api\"; 即可直接使用，callPhone()\n\n/**\r\n * 返回当前时间\r\n * @param {boolean} isShow  判断是否需要返回小时和分钟\r\n * @returns {string} 时间\r\n */\n\nexport function getNowFormatDate(isShow = true) {\n  let date = new Date();\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let strDate = date.getDate();\n  let strHour = date.getHours();\n  let strMin = date.getMinutes();\n  if (month >= 1 && month <= 9) month = `0${month}`;\n  if (strDate >= 1 && strDate <= 9) strDate = `0${strDate}`;\n\n  if (isShow) {\n    return `${year}/${month}/${strDate} ${strHour}:${strMin}`;\n  } else {\n    return `${year}/${month}/${strDate}`;\n  }\n}\n/**\r\n * 拨打电话\r\n * @param {number} phone\r\n *\r\n * 传入需要拨打的手机号\r\n **/\n\nexport function callPhone(x) {\n  Dialog.confirm({\n    title: `确定要拨打电话${x}吗`\n  }).then(() => {\n    console.log('播打成功');\n    const a = document.createElement(\"a\");\n    a.href = `tel:${x}`;\n    a.click(); // on confirm\n  }).catch(() => {\n    console.log('播打失败');\n    Toast.fail('播打失败'); // on cancel\n  });\n}\n/**\r\n * 压缩图片的方法\r\n * @param {string} file\r\n * 文件上传的file对象\r\n * @param {number} quality\r\n * 设置的图片压缩质量,默认为0.6\r\n *\r\n * */\n\nexport function compressImg(file, quality = 0.6) {\n  if (!file) {\n    throw new Error(\"未传入任何文件\");\n  }\n\n  return new Promise((resolve, reject) => {\n    // console.log(\"origin \", file);\n    new ImageCompressor(file, {\n      quality: quality,\n\n      //压缩质量\n      // checkOrientation: false,//指示是否读取图像的Exif方向值(仅为JPEG图像)，然后使用该值自动旋转或翻转图像。默认true\n      success(result) {\n        //如果是Blob类型，需要先进行转换\n        if (result.constructor.name == \"Blob\") {\n          result = new File([result], result.name, {\n            type: \"image/jpeg\"\n          });\n        } // console.log(\"result\", result)\n\n\n        resolve(result);\n      },\n\n      error(e) {\n        console.log(\"文件压缩失败\", e);\n        reject(e);\n      }\n\n    });\n  });\n}\n/**\r\n * 上传图片\r\n * @param {string} file 文件上传的file对象\r\n * @param {boolean} imageCompression 判断是否需要压缩图片\r\n * */\n\nexport function upPic(file, imageCompression) {\n  return new Promise(async (resolve, reject) => {\n    let data = new FormData(); //创建form对象\n    // console.log(\"压缩前\", file)\n\n    if (imageCompression == true) {\n      //将图片压缩\n      // console.log('压缩,导入压缩后的file对象')\n      let compressFile = await compressImg(file);\n      data.append('file', compressFile);\n    } else {\n      // console.log('不压缩,导出原本的file对象')\n      data.append('file', file);\n    }\n\n    util.UploadFile(data).then(res => {\n      if (res.code === 1) {\n        resolve(res.data);\n      } else {\n        Toast.fail({\n          message: res.msg\n        });\n        reject(res.msg);\n      }\n    }).catch(e => {\n      Toast.fail({\n        message: \"上传失败\"\n      });\n      reject(e);\n    });\n  });\n}\n/**\r\n * 预览图片\r\n * @param {any} arr 要预览的图片数组\r\n * @param {number} index 要预览的图片下标\r\n */\n\nexport function imgPreview(arr, index) {\n  ImagePreview(arr, index);\n}\n/**\r\n * 获取文件名（不带后缀）\r\n * @param {string} name\r\n *\r\n * */\n\nexport function getFileNameStr(name) {\n  //name 完整文件名\n  let dotIndex = name.lastIndexOf(\".\");\n  let nameStr = name.slice(0, dotIndex);\n  return nameStr;\n}\n/**\r\n * 获取页面参数\r\n * @param {string} url\r\n * 传入页面地址\r\n * @returns option:{{Object}}\r\n * 返回页面参数\r\n */\n\nexport function getPageParam(url) {\n  let urlStr = url.split(\"?\")[1]; //？后面的部分\n\n  let option = {};\n\n  if (urlStr) {\n    let keyValArr = urlStr.split(\"&\");\n    keyValArr.forEach(function (str, index) {\n      let arr = str.split(\"=\");\n      let key = arr[0];\n      let val = arr[1];\n      option[key] = val;\n    });\n  }\n\n  return option;\n} //获取浏览器类型\n\nexport function getBrowserType() {\n  let str = window.navigator.userAgent;\n  let name;\n\n  if (str.indexOf(\"Opera\") > -1 || str.indexOf(\"OPR\") > -1) {\n    name = \"Opera\";\n    return name;\n  }\n\n  if (str.indexOf(\"Edge\") > -1) {\n    name = \"Edge\";\n    return name;\n  }\n\n  if (str.indexOf(\"Firefox\") > -1) {\n    name = \"Firefox\";\n    return name;\n  }\n\n  if (str.indexOf(\"Chrome\") > -1 && str.indexOf(\"Safari\") > -1) {\n    name = \"Chrome\";\n    return name;\n  }\n\n  if (str.indexOf(\"Chrome\") === -1 && str.indexOf(\"Safari\") > -1) {\n    name = \"Safari\";\n    return name;\n  }\n\n  if (str.indexOf(\"Opera\") === -1 && str.indexOf(\"MSIE\") > -1 || str.indexOf(\"Trident\") > -1) {\n    name = \"IE\";\n    return name;\n  }\n} //防抖 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\n\n/**\r\n * 防抖函数\r\n * @param  fn  要执行的函数\r\n * @param delay 延迟的时间\r\n */\n\nexport function debounce(fn, delay = 1500) {\n  // 定时器\n  let timer = null; // 将debounce处理结果当作函数返回\n\n  return function () {\n    // 保留调用时的this上下文\n    let context = this; // 保留调用时传入的参数\n\n    let args = arguments; // 每次事件被触发时，都去清除之前的旧定时器\n\n    if (timer) {\n      clearTimeout(timer);\n    } // 设立新定时器\n\n\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n} //节流 ：一个函数执行一次后，只有大于设定的执行周期才会执行第二次\n\n/**\r\n * 节流函数\r\n * @param fn  要执行的函数\r\n * @param delay 延迟的时间\r\n */\n\nexport function throttle(fn, wait = 1500) {\n  let inThrottle, lastFn, lastTime;\n  return function () {\n    const context = this,\n          args = arguments;\n\n    if (!inThrottle) {\n      fn.apply(context, args);\n      lastTime = Date.now();\n      inThrottle = true;\n    } else {\n      clearTimeout(lastFn);\n      lastFn = setTimeout(function () {\n        if (Date.now() - lastTime >= wait) {\n          fn.apply(context, args);\n          lastTime = Date.now();\n        }\n      }, Math.max(wait - (Date.now() - lastTime), 0));\n    }\n  };\n}","map":{"version":3,"names":["Dialog","Toast","ImagePreview","ImageCompressor","util","getNowFormatDate","isShow","date","Date","year","getFullYear","month","getMonth","strDate","getDate","strHour","getHours","strMin","getMinutes","callPhone","x","confirm","title","then","console","log","a","document","createElement","href","click","catch","fail","compressImg","file","quality","Error","Promise","resolve","reject","success","result","constructor","name","File","type","error","e","upPic","imageCompression","data","FormData","compressFile","append","UploadFile","res","code","message","msg","imgPreview","arr","index","getFileNameStr","dotIndex","lastIndexOf","nameStr","slice","getPageParam","url","urlStr","split","option","keyValArr","forEach","str","key","val","getBrowserType","window","navigator","userAgent","indexOf","debounce","fn","delay","timer","context","args","arguments","clearTimeout","setTimeout","apply","throttle","wait","inThrottle","lastFn","lastTime","now","Math","max"],"sources":["D:/web/my-blog/src/util/api.js"],"sourcesContent":["//公共的封装方法\r\n\r\nimport {Dialog, Toast, ImagePreview} from \"vant\";\r\nimport ImageCompressor from 'compressorjs'\r\nimport util from \"@/util/utils\";\r\n\r\n// 在需要使用的页面引入即可\r\n// 例：import {callPhone} from \"@/util/api\"; 即可直接使用，callPhone()\r\n\r\n/**\r\n * 返回当前时间\r\n * @param {boolean} isShow  判断是否需要返回小时和分钟\r\n * @returns {string} 时间\r\n */\r\nexport function getNowFormatDate(isShow = true) {\r\n    let date = new Date()\r\n    let year = date.getFullYear()\r\n    let month = date.getMonth() + 1\r\n    let strDate = date.getDate()\r\n    let strHour = date.getHours()\r\n    let strMin = date.getMinutes()\r\n    if (month >= 1 && month <= 9) month = `0${month}`\r\n    if (strDate >= 1 && strDate <= 9) strDate = `0${strDate}`\r\n    if (isShow) {\r\n        return `${year}/${month}/${strDate} ${strHour}:${strMin}`\r\n    } else {\r\n        return `${year}/${month}/${strDate}`\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * 拨打电话\r\n * @param {number} phone\r\n *\r\n * 传入需要拨打的手机号\r\n **/\r\nexport function callPhone(x) {\r\n    Dialog.confirm({\r\n        title: `确定要拨打电话${x}吗`,\r\n    })\r\n        .then(() => {\r\n            console.log('播打成功')\r\n            const a = document.createElement(\"a\");\r\n            a.href = `tel:${x}`\r\n            a.click();\r\n            // on confirm\r\n        })\r\n        .catch(() => {\r\n            console.log('播打失败')\r\n            Toast.fail('播打失败');\r\n            // on cancel\r\n        });\r\n}\r\n\r\n/**\r\n * 压缩图片的方法\r\n * @param {string} file\r\n * 文件上传的file对象\r\n * @param {number} quality\r\n * 设置的图片压缩质量,默认为0.6\r\n *\r\n * */\r\nexport function compressImg(file, quality = 0.6) {\r\n    if (!file) {\r\n        throw new Error(\"未传入任何文件\");\r\n    }\r\n\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n\r\n            // console.log(\"origin \", file);\r\n\r\n            new ImageCompressor(file, {\r\n                quality: quality,//压缩质量\r\n                // checkOrientation: false,//指示是否读取图像的Exif方向值(仅为JPEG图像)，然后使用该值自动旋转或翻转图像。默认true\r\n                success(result) {\r\n\r\n                    //如果是Blob类型，需要先进行转换\r\n                    if (result.constructor.name == \"Blob\") {\r\n                        result = new File([result], result.name, {type: \"image/jpeg\"});\r\n                    }\r\n\r\n                    // console.log(\"result\", result)\r\n\r\n                    resolve(result);\r\n                },\r\n                error(e) {\r\n                    console.log(\"文件压缩失败\", e);\r\n                    reject(e);\r\n                }\r\n            });\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * 上传图片\r\n * @param {string} file 文件上传的file对象\r\n * @param {boolean} imageCompression 判断是否需要压缩图片\r\n * */\r\nexport function upPic(file, imageCompression) {\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        let data = new FormData(); //创建form对象\r\n        // console.log(\"压缩前\", file)\r\n        if (imageCompression == true) {\r\n            //将图片压缩\r\n            // console.log('压缩,导入压缩后的file对象')\r\n            let compressFile = await compressImg(file);\r\n            data.append('file', compressFile);\r\n        } else {\r\n            // console.log('不压缩,导出原本的file对象')\r\n            data.append('file', file);\r\n        }\r\n        util.UploadFile(data)\r\n            .then((res) => {\r\n                if (res.code === 1) {\r\n                    resolve(res.data);\r\n                } else {\r\n                    Toast.fail({message: res.msg})\r\n                    reject(res.msg);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                Toast.fail({message: \"上传失败\"});\r\n                reject(e);\r\n            })\r\n\r\n\r\n    })\r\n}\r\n\r\n/**\r\n * 预览图片\r\n * @param {any} arr 要预览的图片数组\r\n * @param {number} index 要预览的图片下标\r\n */\r\nexport function imgPreview(arr, index) {\r\n    ImagePreview(arr, index)\r\n}\r\n\r\n\r\n/**\r\n * 获取文件名（不带后缀）\r\n * @param {string} name\r\n *\r\n * */\r\nexport function getFileNameStr(name) { //name 完整文件名\r\n    let dotIndex = name.lastIndexOf(\".\")\r\n    let nameStr = name.slice(0, dotIndex)\r\n    return nameStr\r\n}\r\n\r\n\r\n/**\r\n * 获取页面参数\r\n * @param {string} url\r\n * 传入页面地址\r\n * @returns option:{{Object}}\r\n * 返回页面参数\r\n */\r\nexport function getPageParam(url) {\r\n    let urlStr = url.split(\"?\")[1] //？后面的部分\r\n    let option = {}\r\n    if (urlStr) {\r\n        let keyValArr = urlStr.split(\"&\")\r\n        keyValArr.forEach(function (str, index) {\r\n            let arr = str.split(\"=\")\r\n            let key = arr[0]\r\n            let val = arr[1]\r\n            option[key] = val\r\n        })\r\n    }\r\n    return option\r\n}\r\n\r\n\r\n//获取浏览器类型\r\nexport function getBrowserType() {\r\n    let str = window.navigator.userAgent\r\n    let name\r\n    if (str.indexOf(\"Opera\") > -1 || str.indexOf(\"OPR\") > -1) {\r\n        name = \"Opera\"\r\n        return name\r\n    }\r\n    if (str.indexOf(\"Edge\") > -1) {\r\n        name = \"Edge\"\r\n        return name\r\n    }\r\n    if (str.indexOf(\"Firefox\") > -1) {\r\n        name = \"Firefox\"\r\n        return name\r\n    }\r\n    if (str.indexOf(\"Chrome\") > -1 && str.indexOf(\"Safari\") > -1) {\r\n        name = \"Chrome\"\r\n        return name\r\n    }\r\n    if (str.indexOf(\"Chrome\") === -1 && str.indexOf(\"Safari\") > -1) {\r\n        name = \"Safari\"\r\n        return name\r\n    }\r\n    if ((str.indexOf(\"Opera\") === -1 && str.indexOf(\"MSIE\") > -1) || str.indexOf(\"Trident\") > -1) {\r\n        name = \"IE\"\r\n        return name\r\n    }\r\n}\r\n\r\n\r\n//防抖 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\r\n/**\r\n * 防抖函数\r\n * @param  fn  要执行的函数\r\n * @param delay 延迟的时间\r\n */\r\nexport function debounce(fn, delay = 1500) {\r\n    // 定时器\r\n    let timer = null;\r\n    // 将debounce处理结果当作函数返回\r\n    return function() {\r\n        // 保留调用时的this上下文\r\n        let context = this;\r\n        // 保留调用时传入的参数\r\n        let args = arguments;\r\n        // 每次事件被触发时，都去清除之前的旧定时器\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        // 设立新定时器\r\n        timer = setTimeout(function() {\r\n            fn.apply(context, args);\r\n        }, delay);\r\n    };\r\n}\r\n\r\n\r\n//节流 ：一个函数执行一次后，只有大于设定的执行周期才会执行第二次\r\n/**\r\n * 节流函数\r\n * @param fn  要执行的函数\r\n * @param delay 延迟的时间\r\n */\r\nexport function throttle(fn, wait = 1500) {\r\n    let inThrottle, lastFn, lastTime;\r\n    return function() {\r\n        const context = this,\r\n            args = arguments;\r\n        if (!inThrottle) {\r\n            fn.apply(context, args);\r\n            lastTime = Date.now();\r\n            inThrottle = true;\r\n        } else {\r\n            clearTimeout(lastFn);\r\n            lastFn = setTimeout(function() {\r\n                if (Date.now() - lastTime >= wait) {\r\n                    fn.apply(context, args);\r\n                    lastTime = Date.now();\r\n                }\r\n            }, Math.max(wait - (Date.now() - lastTime), 0));\r\n        }\r\n    };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}