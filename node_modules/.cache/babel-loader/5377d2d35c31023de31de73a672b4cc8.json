{"ast":null,"code":"import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\n\nvar stdin_default = lazyManager => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n\n  render(h) {\n    return h(this.tag, {\n      attrs: {\n        src: this.renderSrc\n      }\n    }, this.$slots.default);\n  },\n\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n\n  },\n\n  created() {\n    this.init();\n    this.renderSrc = this.options.loading;\n  },\n\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n\n  methods: {\n    init() {\n      const {\n        src,\n        loading,\n        error\n      } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(`[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`);\n        }\n\n        onFinish();\n        return;\n      }\n\n      const {\n        src\n      } = this.options;\n      loadImageAsync({\n        src\n      }, ({\n        src: src2\n      }) => {\n        this.renderSrc = src2;\n        this.state.loaded = true;\n      }, () => {\n        this.state.attempt++;\n        this.renderSrc = this.options.error;\n        this.state.error = true;\n      });\n    }\n\n  }\n});\n\nexport { stdin_default as default };","map":{"version":3,"names":["useRect","loadImageAsync","noop","stdin_default","lazyManager","props","src","String","Object","tag","type","default","render","h","attrs","renderSrc","$slots","data","el","options","error","loading","attempt","state","loaded","watch","init","addLazyBox","lazyLoadHandler","created","mounted","$el","beforeUnmount","removeComponent","methods","valueFormatter","checkInView","rect","top","window","innerHeight","preLoad","bottom","left","innerWidth","right","load","onFinish","process","env","NODE_ENV","silent","console","log","src2"],"sources":["D:/web/my-blog/node_modules/vant/es/lazyload/vue-lazyload/lazy-image.mjs"],"sourcesContent":["import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nvar stdin_default = (lazyManager) => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n  render(h) {\n    return h(this.tag, {\n      attrs: {\n        src: this.renderSrc\n      }\n    }, this.$slots.default);\n  },\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n  },\n  created() {\n    this.init();\n    this.renderSrc = this.options.loading;\n  },\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(`[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`);\n        }\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync({ src }, ({ src: src2 }) => {\n        this.renderSrc = src2;\n        this.state.loaded = true;\n      }, () => {\n        this.state.attempt++;\n        this.renderSrc = this.options.error;\n        this.state.error = true;\n      });\n    }\n  }\n});\nexport {\n  stdin_default as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}